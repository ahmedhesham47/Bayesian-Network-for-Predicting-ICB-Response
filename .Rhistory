library(survival, lib.loc = "C:/Program Files/R/R-4.2.2/library")
library(cluster, lib.loc = "C:/Program Files/R/R-4.2.2/library")
library(class, lib.loc = "C:/Program Files/R/R-4.2.2/library")
install.packages(c("class", "cluster", "dataset", "survival"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
a
library(tools, lib.loc = "C:/Program Files/R/R-4.2.2/library")
install.packages("Rtools")
install.packages("Rtools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SummarizedExperiment")
BiocManager::install("SummarizedExperiment", force = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinksGUI")
browseVignettes("TCGAbiolinksGUI")
library(TCGAbiolinksGUI)
TCGAbiolinksGUI()
library(TCGAbiolinksGUI)
TCGAbiolinksGUI()
help
help()
clear
clr
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
library(IRanges)
detach("package:IRanges", unload = TRUE)
library(GenomicRanges)
library(IRanges)
library(IRanges)
a = 4
print(a)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges")
library(IRanges)
install.packages("BiocManager")
library(IRanges)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges")
detach("package:IRanges", unload = TRUE)
library(biomaRt)
detach("package:biomaRt", unload = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges")
detach("package:utils", unload = TRUE)
library(utils, lib.loc = "C:/Program Files/R/R-4.2.2/library")
install.packages("survival")
install.packages("IRanges")
library(GenomicRanges)
library(IRanges)
library(GenomicRanges)
install.packages("survival")
install.packages("survminer")
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
force = TRUE
BiocManager::install("GenomicRanges", force = TRUE)
BiocManager::install("IRanges")
BiocManager::install("IRanges", force = TRUE)
BiocManager::install("rtracklayer")
BiocManager::install("rtracklayer")
BiocManager::install("rtracklayer", force = TRUE)
library(rtracklayer)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
BiocManager::install("Biostrings", force = TRUE)
install.packages('rBLAST', repos = 'https://mhahsler.r-universe.dev')
library('rBLAST')
? blast
? blast
library(rtracklayer)
library(rBLAST)
v3 = c(6:9)
v3[-3]
v <- c(1, 2, 3)
class(v)
x <- 3
class(x)
df = data.frame(names, ages, fav_food)
#testing
names = c("Ahmed", "Mohamed", "Omar", "Khaled")
ages = c(19, 20, 21, 20)
fav_food = c("Shrimps", "Pizza", "Pizza", "Salmon")
df = data.frame(names, ages, fav_food)
df
df[fav_food]
df["fav_food"]
df["fav_food"] = "Pizza"
df = data.frame(names, ages, fav_food)
df
df[3]
df[df[3] = "Pizza"]
df[3]
df[df[3] == "Pizza"]
class(info)
info = cbind(names, ages, fav_food)
class(info)
class(df)
High_85_MAF <- read.table("D:/UST/TNBC Pipeline/Mutations/Maftools - M1-based datasets/High_85_MAF.rdata", header=TRUE, quote="\"")
View(High_85_MAF)
View(High_85_MAF)
library(devtools)
library(treeWAS)
## install treeWAS from github:
install_github("caitiecollins/treeWAS", build_vignettes = TRUE)
library(treeWAS)
browseVignettes("treeWas")
browseVignettes("treeWas")
library(treeWAS)
browseVignettes("treeWas")
browseVignettes(treeWas)
install.packages("TreeWas")
## install devtools, if necessary:
install.packages("devtools", dep=TRUE)
install.packages("devtools", dep = TRUE)
library(devtools)
## install treeWAS from github:
install_github("caitiecollins/treeWAS", build_vignettes = TRUE)
library(treeWAS)
browseVignettes("treeWas")
browseVignettes("treeWAS")
## Load example data:
data(snps)
force(snps)
force(snps)
View(snps)
data(phen)
force(phen)
data(tree)
force(tree)
View(tree)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
table(phen)
## tree
str(tree)
## Load colours:
data(phen.plot.col)
force(phen.plot.col)
## Plot tree showing phenotype:
plot_phen(tree, phen.nodes=phen.plot.col$all.nodes)
## Load colours:
data(phen.plot.col)
force(phen.plot.col)
## Plot tree showing phenotype:
plot_phen(tree, phen.nodes=phen.plot.col$all.nodes)
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
seed = 1)
View(out)
gene = survfit(Surv(Time, Event)~CD38 ,data=activated_survival)
library(survival)
library(survminer)
library(readxl)
activated_mixture_file = subset(mrna_df_tpm_85, symbol %in% Intersection_activated_DEGs_DMGs_85_0.1$x)
library(treeWAS)
## Load example data:
data(snps)
data(phen)
data(tree)
force(phen)
force(snps)
force(tree)
View(tree)
View(snps)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
table(phen)
## tree
str(tree)
## Load colours:
data(phen.plot.col)
force(phen.plot.col)
## Plot tree showing phenotype:
plot_phen(tree, phen.nodes=phen.plot.col$all.nodes)
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
seed = 1,
)
View(snps)
View(phen.plot.col)
View(tree)
tree[["edge"]]
tree[["tip.label"]]
View(snps)
tree[["edge.length"]]
tree[["Nnode"]]
tree[["edge"]]
write.csv(snps, "Snp.csv")
write.csv(phen, "Phen.csv")
write.csv(tree, "Tree.csv")
write.treeWAS(out, "Output")
write.treeWAS(out, "Output.csv")
write.treeWAS(out, "Output.csv")
plot_phen(tree, phen, snp)
plot_phen(tree, phen, snps)
plot_sig_snps()
print.treeWAS
treeWAS(snps, phen, tree)
snps.assoc
treeWAS.example.out
tree
tree.reconstruct()
snp.sim()
snps.assoc
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "rcsb_pdb_5X2H", format = "fasta")
setwd("C:/Users/Ahmed/Documents")
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "rcsb_pdb_5X2H", format = "fasta")
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "rcsb_pdb_5X2H.fasta", format = "fasta")
View(dna)
## Convert:
mat <- DNAbin2genind(dna)@tab
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "rcsb_pdb_5X2H.fasta", format = "fasta")
## Convert:
mat <- DNAbin2genind(dna)@tab
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "rcsb_pdb_5X2H.fasta", format = "fasta")
dna
dna[1]
dna[[1]]
dna
## Convert:
mat <- DNAbin2genind(dna)@tab
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "sequence.fasta", format = "fasta")
dna
## Convert:
mat <- DNAbin2genind(dna)@tab
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "sequence.fasta", format = "fasta")
dna
## Convert:
mat <- DNAbin2genind(dna)@tab
View(mat)
## (Template code, don't run)
## Read data from file:
dna <- read.dna(file = "sequence.fasta", format = "fasta")
## Convert:
mat <- DNAbin2genind(dna)@tab
View(mat)
library(treeWAS)
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
seed = 1,
)
out$treeWAS.combined
out$terminal$p.vals
out$terminal$sig.snps
out$simultaneous$sig.snps
devtools::install_github("Dulab2020/scWizard")
devtools::install_github("Dulab2020/scWizard")
install.packages("scWizard")
library(IMvigor210CoreBiologies)
install.packages("IMvigor210CoreBiologies")
install.packages("IMvigor210CoreBiologies")
BiocManager::install("easierData")
BiocManager::install("easierData")
library(easyData)
library(easierData)
easierData
easierData::
easierData::get_TCGA_mean_pancancer()
easierData::get_TCGA_mean_pancancer()
x = 5
# Install and load the bnlearn package
if (!require(bnlearn)) {
install.packages("bnlearn")
}
install.packages("bnlearn")
R.version.string
R.version.string
# Install and load the bnlearn package
if (!require(bnlearn)) {
install.packages("bnlearn")
}
library(bnlearn)
# Read the CSV file
data <- read.csv("D:\UST\Year 4\Fall\Artificial Intelligence Techniques\Project\Data\Final_Eigengenes.csv")
# Read the CSV file
data <- read.csv("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project/Data/Final_Eigengenes.csv")
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-(1:2)]) {
if (col != 'ICB Response'){
data[[col]] <- discretize(data[[col]], method = "hartemink", breaks = 3)
}
}
View(data)
data <- as.data.frame(data)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-(1:2)]) {
if (col != 'ICB Response'){
data[[col]] <- discretize(data[[col]], method = "hartemink", breaks = 3)
}
}
data <- as.data.frame(data)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-(1:2)]) {
if (col != 'ICB Response'){
data[[col]] <- discretize(data[[col]], method = "hartemink", breaks = 3)
}
}
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-(1:2)]) {
if (col != "ICB Response") {
data[, col] <- discretize(data[, col], method = "hartemink", breaks = 3)
}
}
# View the first few rows of the modified dataframe
head(data)
if (col != "ICB Response") {
data[, col] <- discretize(data[, col], method = "hartemink", breaks = 3)
}
type(data)
data.type
# Read the CSV file
data <- read.csv("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project/Data/Final_Eigengenes.csv", stringsAsFactors = FALSE)
data <- as.data.frame(data)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-(1:2)]) {
if (col != "ICB Response") {
data[, col] <- discretize(data[, col], method = "hartemink", breaks = 3)
}
}
data[, col] <- discretize(temp_df[, 1], method = "hartemink", breaks = 3)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-c(1, 2, ncol(data))]) {
# Creating a temporary data frame to ensure proper structure
temp_df <- data.frame(data[, col])
data[, col] <- discretize(temp_df[, 1], method = "hartemink", breaks = 3)
}
View(temp_df)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-c(1, 2, ncol(data))]) {
# Creating a temporary data frame to ensure proper structure
temp_df <- data.frame(data[, col])
data[, col] <- discretize(temp_df[, 1], method = "hartemink", breaks = 3)
}
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-c(1, 2, ncol(data))]) {
# Discretize directly in the data frame
data[[col]] <- discretize(data[[col]], method = "hartemink", breaks = 3)
}
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(data)[-c(1, 2, ncol(data))]) {
# Discretize directly in the data frame
data[[col]] <- discretize(data[[col]], method = "hartemink", breaks = 3)
}
View(data)
typeof(data)
data <- as.data.frame(data)
typeof(data)
data <- as.dataframe(data)
# Read the CSV file
data <- read.csv("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project/Data/Final_Eigengenes.csv", stringsAsFactors = FALSE)
typeof(data)
data <- as.data.frame(data)
typeof(data)
data <- data.frame(data)
typeof(data)
str(data)
typeof(data)
typeof(str(data))
z = str(data)
typeof(z)
# Read the CSV file
data <- read.csv("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project/Data/Final_Eigengenes.csv", stringsAsFactors = FALSE)
typeof(data)
data <- as.data.frame(data)
typeof(data)
typeof(data)
Final_Eigengenes <- read.csv("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project/Data/Final_Eigengenes.csv")
View(Final_Eigengenes)
Final_Eigengenes
typeof(Final_Eigengenes)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(Final_Eigengenes)[-c(1, 2, ncol(Final_Eigengenes))]) {
# Discretize directly in the data frame
Final_Eigengenes[[col]] <- discretize(Final_Eigengenes[[col]], method = "hartemink", breaks = 3)
}
Final_Eigengenes = as.data.frame(Final_Eigengenes)
# Discretize the columns
# Assuming you want to discretize all columns except the first two (Identifier and Unnamed)
for (col in names(Final_Eigengenes)[-c(1, 2, ncol(Final_Eigengenes))]) {
# Discretize directly in the data frame
Final_Eigengenes[[col]] <- discretize(Final_Eigengenes[[col]], method = "hartemink", breaks = 3)
}
class(data)
class(Final_Eigengenes)
for (col in names(Final_Eigengenes)[-c(1, 2, ncol(Final_Eigengenes))]) {
# Discretize directly in the data frame
Final_Eigengenes[[col]] <- discretize(Final_Eigengenes[[col]], method = "hartemink", breaks = 3)
}
Final_Eigengenes = as.data.frame(Final_Eigengenes)
data_first_two <- Final_Eigengenes[, 2]
samples <- Final_Eigengenes[, 2]
label <- Final_Eigengenes[, ncol(data)]
label <- Final_Eigengenes[, ncol(Final_Eigengenes)]
# Read the CSV file
Final_Eigengenes <- read.csv("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project/Data/Final_Eigengenes.csv", stringsAsFactors = FALSE)
Final_Eigengenes = as.data.frame(Final_Eigengenes)
samples <- Final_Eigengenes[, 2]
label <- Final_Eigengenes[, ncol(Final_Eigengenes)]
data_selected <- Final_Eigengenes[, -c(1, 2, ncol(data))]
discretize(data_selected, method = "hartemink", breaks = 3)
data_selected <- Final_Eigengenes[, -c(1, 2, ncol(data))]
View(data_selected)
View(Final_Eigengenes)
data_selected <- Final_Eigengenes[, -c(1, 2, ncol(data) + 1)]
data_selected <- Final_Eigengenes[, -c(1, 2, ncol(Final_Eigengenes))]
discretize(data_selected, method = "hartemink", breaks = 3)
View(data_selected)
discretize(data_selected, method = "hartemink", breaks = 2)
discretize(data_selected, method = "hartemink", breaks = 3)
cat = discretize(Final_Eigengenes, method = "hartemink", breaks = 3)
discretize(Final_Eigengenes, method = "hartemink", breaks = 3)
Final_Eigengenes = as.data.frame(Final_Eigengenes)
discretize(Final_Eigengenes, method = "hartemink", breaks = 3)
data_selected <- Final_Eigengenes[, -c(1, 2)]
discretize(Final_Eigengenes, method = "hartemink", breaks = 3)
data_selected <- Final_Eigengenes[, -c(1, 2, ncol(Final_Eigengenes))]
discretize(Final_Eigengenes, method = "hartemink", breaks = 3)
discretize(Final_Eigengenes, method = "hartemink", breaks = 3)
data_selected <- Final_Eigengenes[, -c(1, 2)]
discretize(data_selected, method = "hartemink", breaks = 3)
data_selected <- Final_Eigengenes[, -c(1, 2, ncol(Final_Eigengenes))]
discretize(data_selected, method = "hartemink", breaks = 3)
cat = discretize(data_selected, method = "hartemink", breaks = 3)
View(cat)
cat = discretize(data_selected, method = "hartemink", breaks = 3, ibreaks=1)
cat = discretize(data_selected, method = "hartemink", breaks = 3, ibreaks=3)
cat = discretize(data_selected, method = "hartemink", breaks = 3, ibreaks=10)
View(cat)
cat = discretize(data_selected, method = "hartemink", breaks = 3)
View(cat)
# Combine the dataframes back together
data_final <- cbind(samples, data_selected, label)
View(data_final)
View(Final_Eigengenes)
# Combine the dataframes back together
data_final <- cbind(samples, cat, label)
View(data_final)
colnames(data_final)[1] = 'Sample Identifier'
View(data_final)
colnames(data_final)[-1] = 'ICB Response'
View(data_final)
# Combine the dataframes back together
data_final <- cbind(samples, cat, label)
View(data_final)
colnames(data_final)[ncol(data_final)] = 'ICB Response'
colnames(data_final)[1] = 'Sample Identifier'
View(data_final)
write.csv(data_final, "hartmink_cat_eigengenes", row.names=FALSE, quote=FALSE)
setwd("D:/UST/Year 4/Fall/Artificial Intelligence Techniques/Project")
write.csv(data_final, "Data/hartmink_cat_eigengenes", row.names=FALSE, quote=FALSE)
write.csv(data_final, "Data/hartmink_cat_eigengenes.tsv", row.names=FALSE, quote=FALSE)
write.csv(data_final, "Data/hartmink_cat_eigengenes.csv", row.names=FALSE, quote=FALSE)
View(data_final)
write.table(data_final, "Data/hartmink_cat_eigengenes.tsv", sep='\t', row.names=FALSE, quote=FALSE)
View(data_final)
